//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 The Podseidon Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdmissionHistoryConfig) DeepCopyInto(out *AdmissionHistoryConfig) {
	*out = *in
	if in.MaxConcurrentLag != nil {
		in, out := &in.MaxConcurrentLag, &out.MaxConcurrentLag
		*out = new(int32)
		**out = **in
	}
	if in.CompactThreshold != nil {
		in, out := &in.CompactThreshold, &out.CompactThreshold
		*out = new(int32)
		**out = **in
	}
	if in.AggregationRateMillis != nil {
		in, out := &in.AggregationRateMillis, &out.AggregationRateMillis
		*out = new(int32)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdmissionHistoryConfig.
func (in *AdmissionHistoryConfig) DeepCopy() *AdmissionHistoryConfig {
	if in == nil {
		return nil
	}
	out := new(AdmissionHistoryConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtector) DeepCopyInto(out *PodProtector) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtector.
func (in *PodProtector) DeepCopy() *PodProtector {
	if in == nil {
		return nil
	}
	out := new(PodProtector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PodProtector) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorAdmissionBucket) DeepCopyInto(out *PodProtectorAdmissionBucket) {
	*out = *in
	in.StartTime.DeepCopyInto(&out.StartTime)
	if in.PodUid != nil {
		in, out := &in.PodUid, &out.PodUid
		*out = new(types.UID)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = (*in).DeepCopy()
	}
	if in.Counter != nil {
		in, out := &in.Counter, &out.Counter
		*out = new(int32)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorAdmissionBucket.
func (in *PodProtectorAdmissionBucket) DeepCopy() *PodProtectorAdmissionBucket {
	if in == nil {
		return nil
	}
	out := new(PodProtectorAdmissionBucket)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorAdmissionHistory) DeepCopyInto(out *PodProtectorAdmissionHistory) {
	*out = *in
	if in.Buckets != nil {
		in, out := &in.Buckets, &out.Buckets
		*out = make([]PodProtectorAdmissionBucket, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorAdmissionHistory.
func (in *PodProtectorAdmissionHistory) DeepCopy() *PodProtectorAdmissionHistory {
	if in == nil {
		return nil
	}
	out := new(PodProtectorAdmissionHistory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorAggregation) DeepCopyInto(out *PodProtectorAggregation) {
	*out = *in
	in.LastEventTime.DeepCopyInto(&out.LastEventTime)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorAggregation.
func (in *PodProtectorAggregation) DeepCopy() *PodProtectorAggregation {
	if in == nil {
		return nil
	}
	out := new(PodProtectorAggregation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorCellStatus) DeepCopyInto(out *PodProtectorCellStatus) {
	*out = *in
	in.Aggregation.DeepCopyInto(&out.Aggregation)
	in.History.DeepCopyInto(&out.History)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorCellStatus.
func (in *PodProtectorCellStatus) DeepCopy() *PodProtectorCellStatus {
	if in == nil {
		return nil
	}
	out := new(PodProtectorCellStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorList) DeepCopyInto(out *PodProtectorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PodProtector, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorList.
func (in *PodProtectorList) DeepCopy() *PodProtectorList {
	if in == nil {
		return nil
	}
	out := new(PodProtectorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PodProtectorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorSpec) DeepCopyInto(out *PodProtectorSpec) {
	*out = *in
	in.Selector.DeepCopyInto(&out.Selector)
	if in.AggregationSelector != nil {
		in, out := &in.AggregationSelector, &out.AggregationSelector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	in.AdmissionHistoryConfig.DeepCopyInto(&out.AdmissionHistoryConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorSpec.
func (in *PodProtectorSpec) DeepCopy() *PodProtectorSpec {
	if in == nil {
		return nil
	}
	out := new(PodProtectorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorStatus) DeepCopyInto(out *PodProtectorStatus) {
	*out = *in
	if in.Cells != nil {
		in, out := &in.Cells, &out.Cells
		*out = make([]PodProtectorCellStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	out.Summary = in.Summary
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorStatus.
func (in *PodProtectorStatus) DeepCopy() *PodProtectorStatus {
	if in == nil {
		return nil
	}
	out := new(PodProtectorStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodProtectorStatusSummary) DeepCopyInto(out *PodProtectorStatusSummary) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodProtectorStatusSummary.
func (in *PodProtectorStatusSummary) DeepCopy() *PodProtectorStatusSummary {
	if in == nil {
		return nil
	}
	out := new(PodProtectorStatusSummary)
	in.DeepCopyInto(out)
	return out
}
