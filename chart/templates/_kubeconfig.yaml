{{/* vim: set filetype=gotmpl : */}}

{{- /*
Generate the volume specs required for a pod that connects to a specified cluster.
The output is a dictionary in the BoilerplateVolumes format.
Additional parameters:
  .config: part of values.yaml that specifies the cluster
  .volumeName: name of the volume
  .argPrefix: the argument prefix (`clusterName` in code, either "core" or "worker")
  */}}
{{- define "podseidon.kubeconfig.volumes.yaml"}}
{{- if (keys .config.source | len | ne 1)}}
{{- printf "Validating %s cluster volumes: cluster config can only use one of inCluster/literal/fromSecret, got %v" .argPrefix (keys .config.source) | fail}}
{{- end}}

{{- if hasKey .config.source "inCluster"}}
{{- else if hasKey .config.source "literal"}}
{{toJson .volumeName}}:
  mountPath: {{printf "/mnt/%s/kubeconfig" .volumeName | toJson}}
  readOnly: true
  subPath: kubeconfig
  source:
    secret:
      secretName: {{toJson .volumeName}}
{{- else if hasKey .config.source "fromSecret"}}
{{toJson .volumeName}}:
  mountPath: {{printf "/mnt/%s/kubeconfig" .volumeName | toJson}}
  readOnly: true
  subPath: {{toJson .config.source.fromSecret.subPath}}
  source:
    secret:
      secretName: {{toJson .config.source.fromSecret.secretName}}
{{- else}}
{{- printf "Validating %s cluster volumes: %s cluster config must use one of inCluster/literal/fromSecret, got %v" .argPrefix (keys .config.source) | fail}}
{{- end}}
{{- end}}

{{- /*
Generate the secrets required for a pod that connects to a specified cluster.
Additional parameters:
  .config: part of values.yaml that specifies the cluster
  .volumeName: name of the volume
  .argPrefix: the argument prefix (`clusterName` in code, either "core" or "worker")
  */}}
{{- define "podseidon.kubeconfig.extra-objects.obj"}}
{{- if hasKey .config.source "literal"}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{toJson .volumeName}}
data:
  kubeconfig: {{.config.source.literal.config | toJson | b64enc | toJson}}
{{- end}}
{{- end}}

{{- /*
Generate the arguments passed to the container process that connects to a specified cluster.
Args:
  .config: part of values.yaml that specifies the cluster
  .volumeName: name of the volume
  .argPrefix: the argument prefix (`clusterName` in code, either "core" or "worker")
  */}}
{{- define "podseidon.kubeconfig.args.yaml"}}
{{- if (keys .config.source | len | ne 1)}}
{{- printf "Validating %s cluster args: cluster config can only use one of inCluster/literal/fromSecret, got %v" .argPrefix (keys .config.source) | fail}}
{{- end}}

{{- if hasKey .config.source "inCluster"}}
{{printf "%s-kube-master" .argPrefix | toJson}}: {{toJson .config.source.inCluster.masterUrl}}
{{- else if hasKey .config.source "literal"}}
{{printf "%s-kube-config" .argPrefix | toJson}}: {{printf "/mnt/%s/kubeconfig" .volumeName | toJson}}
{{printf "%s-kube-master" .argPrefix | toJson}}: {{toJson .config.source.literal.masterUrl}}
{{- else if hasKey .config.source "fromSecret"}}
{{printf "%s-kube-config" .argPrefix | toJson}}: {{printf "/mnt/%s/kubeconfig" .volumeName | toJson}}
{{printf "%s-kube-master" .argPrefix | toJson}}: {{toJson .config.source.fromSecret.masterUrl}}
{{- else}}
{{- printf "Validating %s cluster args: cluster config must use one of inCluster/literal/fromSecret, got %v" .argPrefix (keys .config.source) | fail}}
{{- end}}

{{printf "%s-kube-impersonate-username" .argPrefix | toJson}}: {{toJson .config.impersonate.username}}
{{printf "%s-kube-impersonate-uid" .argPrefix | toJson}}: {{toJson .config.impersonate.uid}}
{{printf "%s-kube-impersonate-groups" .argPrefix | toJson}}: {{toJson .config.impersonate.userGroups}}

{{printf "%s-kube-qps" .argPrefix | toJson}}: {{toJson .config.qps}}
{{printf "%s-kube-burst" .argPrefix | toJson}}: {{toJson .config.burst}}

{{printf "%s-kube-target-namespace" .argPrefix | toJson}}: {{toJson .config.targetNamespace}}
{{- end}}
