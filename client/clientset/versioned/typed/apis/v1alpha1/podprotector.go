// Copyright 2024 The Podseidon Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"

	v1alpha1 "github.com/kubewharf/podseidon/apis/v1alpha1"
	scheme "github.com/kubewharf/podseidon/client/clientset/versioned/scheme"
)

// PodProtectorsGetter has a method to return a PodProtectorInterface.
// A group's client should implement this interface.
type PodProtectorsGetter interface {
	PodProtectors(namespace string) PodProtectorInterface
}

// PodProtectorInterface has methods to work with PodProtector resources.
type PodProtectorInterface interface {
	Create(
		ctx context.Context,
		podProtector *v1alpha1.PodProtector,
		opts v1.CreateOptions,
	) (*v1alpha1.PodProtector, error)
	Update(
		ctx context.Context,
		podProtector *v1alpha1.PodProtector,
		opts v1.UpdateOptions,
	) (*v1alpha1.PodProtector, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(
		ctx context.Context,
		podProtector *v1alpha1.PodProtector,
		opts v1.UpdateOptions,
	) (*v1alpha1.PodProtector, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.PodProtector, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.PodProtectorList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(
		ctx context.Context,
		name string,
		pt types.PatchType,
		data []byte,
		opts v1.PatchOptions,
		subresources ...string,
	) (result *v1alpha1.PodProtector, err error)
	PodProtectorExpansion
}

// podProtectors implements PodProtectorInterface
type podProtectors struct {
	*gentype.ClientWithList[*v1alpha1.PodProtector, *v1alpha1.PodProtectorList]
}

// newPodProtectors returns a PodProtectors
func newPodProtectors(c *PodseidonV1alpha1Client, namespace string) *podProtectors {
	return &podProtectors{
		gentype.NewClientWithList[*v1alpha1.PodProtector, *v1alpha1.PodProtectorList](
			"podprotectors",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.PodProtector { return &v1alpha1.PodProtector{} },
			func() *v1alpha1.PodProtectorList { return &v1alpha1.PodProtectorList{} }),
	}
}
